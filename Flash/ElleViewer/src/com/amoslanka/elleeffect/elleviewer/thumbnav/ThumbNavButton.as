package com.amoslanka.elleeffect.elleviewer.thumbnav {// Import Adobe classes.import flash.display.*;import flash.events.*;import flash.geom.*;import flash.net.*;import flash.text.*;import flash.utils.*;// Import third-party classes./*import caurina.transitions.*;import caurina.transitions.properties.*;*/import com.greensock.*;import com.greensock.plugins.*;// Import custom classes.import com.summitprojects.core3.util.VerboseTrace;import com.summitprojects.core3.display.Rect;import com.summitprojects.core3.display.LoaderGT;import com.summitprojects.core3.display.LoaderEventsGT;import com.summitprojects.core3.ui.buttons.*;import com.summitprojects.core3.display.preloader.IPreloaderComponent;// Import project classes.import com.amoslanka.elleeffect.elleviewer.Config;/** * Description goes here. * @class 			ThumbNavButton * @author  		amoslanka * @date			2010.02.07 * @version			0.1 * @langVersion		3 * @playerVersion	9**/public class ThumbNavButton extends AbstractButtonDecorator {		public static const CLASS_NAME:String = "ThumbNavButton";	public override function get className():String { return CLASS_NAME; }		private var _loader:LoaderGT;	private var _preloader:IPreloaderComponent;	private var _mask:DisplayObject;	private var _url:String;		private var _white:Sprite;		/**	 * Constructor.	 * @param		target		The target Sprite.	 * @param		verbosity	The verbosity level.	**/	public function ThumbNavButton(url:String=null, target:Sprite=null, verbosity:int=0) {		target = target ? target : new Sprite();		_url = url;		var btn:IButtonComponent = new AbstractButton(target);		_white = new Sprite();		btn = new AlphaButton(btn, _white, 0, 1, 1);		super(btn);        /*this.disable();*/	}		public override function toString():String {		return className + " >> target: " + target;	}	// INITIALIZATION ===============================================================================================================	/*private function init(verbosity:int=0):void {		initVars(verbosity);		initObjects();		initEvents();	}		private function initVars(verbosity:int=0):void {		vt = new VerboseTrace(verbosity, "  [ " + className + " ]  ");		em = new EventManager();				TweenPlugin.activate([AutoAlphaPlugin]);			}		private function initEvents():void {		em.addEvent(target, Event.REMOVED_FROM_STAGE, onRemovedFromStage);	}*/		override protected function createChildren():void {		super.createChildren();                if (!empty)        {    		_mask = new Rect(0,0,Config.THUMB_WIDTH, Config.THUMB_WIDTH);    		target.addChild(_mask);    		_loader = new LoaderGT(_url, onLoaderComplete);    		target.addChild(_loader);    		_loader.mask = _mask;    		em.addEvent(_loader, IOErrorEvent.IO_ERROR, onLoaderError);        }        else        {            this.disable();        }				_white.addChild(new Rect(0, 0, Config.THUMB_WIDTH, Config.THUMB_WIDTH, 0xffffff, empty ? .8 : .5));		target.addChild(_white);			}		// DECONSTRUCTION =====================================================================================================================	override public function dispose():void {		super.dispose();		_loader.dispose();		disposeImagePreloader();	}	private function disposeImagePreloader() : void {		if (_preloader) {			_preloader.dispose();			target.removeChild(_preloader.target);			_preloader = null;		}	}		// ACTIONS =====================================================================================================================		/**	 * Sets the visual state of the element when it has been selected.  By default simply calls hilight(); override this method to	 * set a different visual state.	 * @see	#select()	 * @see	#highlight()	**/	override public function setSelectedState():void {		super.setSelectedState();		TweenLite.to(target, .1, {y:10, ease:"easeOutQuad"});	}		/**	 * Sets the visual state of the element when it has been unselected.  By default simply calls unhilight(); override this method to	 * set a different visual state.	 * @see	#unselect()	 * @see	#unhighlight()	**/	override public function setUnselectedState():void {		super.setUnselectedState();		TweenLite.to(target, .5, {y:0, ease:"easeOutQuad"});	}			public function addPreloader(preloader:IPreloaderComponent) : void {		preloader.target.width = Config.THUMB_WIDTH;		preloader.target.scaleY = preloader.target.scaleX;		target.addChild(preloader.target);		em.addEvent(preloader, Event.COMPLETE, onPreloaderComplete);		em.addEvent(preloader, LoaderEventsGT.ERROR, onPreloaderComplete);		em.addEvent(preloader, LoaderEventsGT.CLOSE, onPreloaderComplete);		_preloader = preloader;	}		// ANIMATIONS ==================================================================================================================	override public function intro(dly:Number=0, callback:Function=null, callbackParams:Array=null):void {		/*Tweener.addTween(target, {_autoAlpha:1, time:.5, transition:"easeOutQuad", delay:dly, onComplete:callback, onCompleteParams:callbackParams});*/		TweenLite.to(target, .5, {autoAlpha:1, ease:"easeOutQuad", delay:dly, onComplete:callback, onCompleteParams:callbackParams});	}	override public function exit(dly:Number=0, callback:Function=null, callbackParams:Array=null):void {		/*Tweener.addTween(target, {_autoAlpha:0, time:.5, transition:"easeOutQuad", delay:dly, onComplete:callback, onCompleteParams:callbackParams});*/		TweenLite.to(target, .5, {autoAlpha:0, ease:"easeOutQuad", delay:dly, onComplete:callback, onCompleteParams:callbackParams});	}	// EVENTS ======================================================================================================================	private function onLoaderComplete(e:Event) : void {		vt.trace(1, "onLoaderComplete " );				var bitmap:Bitmap = _loader.content as Bitmap;		if (bitmap) {			bitmap.smoothing = true;			bitmap.width = _mask.width;			bitmap.scaleY = bitmap.scaleX;			if (bitmap.height < _mask.height) {				bitmap.height = _mask.height;				bitmap.scaleX = bitmap.scaleY;			}		}		        /*this.enable();*/		dispatchEvent(new Event(Event.COMPLETE));	}		private function onLoaderError(e:Event) : void {		vt.trace(0, "onLoaderError " );        /*this.enable();*/		dispatchEvent(e);	}		private function onPreloaderComplete(e:Event) : void {		vt.trace(0, "onPreloaderComplete " );		disposeImagePreloader();	}		// SETTERS AND GETTERS =========================================================================================================		// UTILITY =====================================================================================================================    public function get empty():Boolean    {        return _url == null;    }	}}